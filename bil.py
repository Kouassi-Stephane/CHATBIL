import streamlit as st
import speech_recognition as sr
import nltk
from nltk.tokenize import RegexpTokenizer
from nltk.stem.snowball import FrenchStemmer
import string
import random
import json
import datetime
import requests
import pandas as pd
from textblob import TextBlob
import warnings
warnings.filterwarnings('ignore')

class AdvancedVoiceChatbot:
    def __init__(self):
        self.recognizer = sr.Recognizer()
        self.tokenizer = RegexpTokenizer(r'\w+')
        self.stemmer = FrenchStemmer()
        self.load_training_data()
        
    def load_training_data(self):
        """On pourrait Charger et pr√©parer les donn√©es d'entra√Ænement avanc√©es du chatbot"""
        self.intents = {
            "salutations": {
                "patterns": [
                    "bonjour", "salut", "hello", "coucou", "hey", "bonsoir",
                    "comment √ßa va", "comment vas-tu", "√ßa va"
                ],
                "responses": [
                    "Bonjour! Je suis votre assistant virtuel. Comment puis-je vous aider?",
                    "Salut! Ravi de vous parler. Que puis-je faire pour vous?",
                    "Hey! Je suis l√† pour vous aider. Que souhaitez-vous faire?"
                ]
            },
            "aurevoir": {
                "patterns": [
                    "au revoir", "bye", "√† bient√¥t", "√† plus", "adieu", "bonne journ√©e"
                ],
                "responses": [
                    "Au revoir! Passez une excellente journ√©e!",
                    "√Ä bient√¥t! N'h√©sitez pas √† revenir si vous avez besoin d'aide.",
                    "Au revoir et merci de votre visite!"
                ]
            },
            "heure": {
                "patterns": [
                    "quelle heure", "l'heure", "heure actuelle", "temps"
                ],
                "responses": [
                    lambda: f"Il est actuellement {datetime.datetime.now().strftime('%H:%M')}."
                ]
            },
            "date": {
                "patterns": [
                    "quel jour", "quelle date", "date aujourd'hui", "on est quel jour"
                ],
                "responses": [
                    lambda: f"Nous sommes le {datetime.datetime.now().strftime('%d/%m/%Y')}."
                ]
            },
            "m√©t√©o": {
                "patterns": [
                    "m√©t√©o", "temps qu'il fait", "temp√©rature", "climat"
                ],
                "responses": [
                    "Je peux vous donner la m√©t√©o. Pour quelle ville souhaitez-vous la conna√Ætre?"
                ]
            },
            "humeur": {
                "patterns": [
                    "comment te sens tu", "√ßa va", "tu vas bien", "ton humeur"
                ],
                "responses": [
                    "Je suis un programme, mais j'appr√©cie votre int√©r√™t! Je suis l√† pour vous aider.",
                    "Tr√®s bien, merci! Comment puis-je vous assister aujourd'hui?",
                    "En pleine forme et pr√™t √† vous aider!"
                ]
            },
            "capacit√©s": {
                "patterns": [
                    "que sais tu faire", "tes capacit√©s", "peux tu faire",
                    "tes fonctionnalit√©s", "aide", "help"
                ],
                "responses": [
                    """Je peux vous aider avec plusieurs choses :
                    1. Vous donner l'heure et la date
                    2. Vous renseigner sur la m√©t√©o
                    3. R√©pondre √† des questions g√©n√©rales
                    4. Effectuer des calculs simples
                    5. Et bien plus encore! N'h√©sitez pas √† me poser vos questions."""
                ]
            }
        }

    def preprocess_text(self, text):
        """Pr√©traitement du texte en entr√©e de mani√®re avanc√©e"""
        try:
            # Conversion en minuscules
            text = text.lower()
            
            # Tokenization
            tokens = self.tokenizer.tokenize(text)
            
            # Stemming (racinalisation) des mots en fran√ßais
            tokens = [self.stemmer.stem(token) for token in tokens]
            
            return tokens
        except Exception as e:
            st.error(f"Erreur lors du pr√©traitement: {str(e)}")
            return text.lower().split()

    def analyze_sentiment(self, text):
        """Analyse du sentiment du texte"""
        try:
            blob = TextBlob(text)
            # Convertit le score de sentiment (-1 √† 1) en cat√©gorie
            if blob.sentiment.polarity > 0.3:
                return "positif"
            elif blob.sentiment.polarity < -0.3:
                return "n√©gatif"
            return "neutre"
        except:
            return "neutre"

    def get_intent(self, tokens):
        """D√©termination de l'intention de l'utilisateur"""
        max_similarity = 0
        matched_intent = None

        for intent, data in self.intents.items():
            for pattern in data["patterns"]:
                pattern_tokens = self.preprocess_text(pattern)
                # Calcul de similarit√© simple bas√© sur les mots communs
                similarity = len(set(tokens) & set(pattern_tokens)) / len(set(tokens + pattern_tokens))
                if similarity > max_similarity and similarity > 0.2:  # Seuil minimum de similarit√©
                    max_similarity = similarity
                    matched_intent = intent

        return matched_intent

    def get_weather(self, city):
        """R√©cup√®ration de la m√©t√©o pour une ville donn√©e (simulation)"""
        weather_data = {
            "Paris": {"temp": "22¬∞C", "condition": "ensoleill√©"},
            "Lyon": {"temp": "20¬∞C", "condition": "nuageux"},
            "Marseille": {"temp": "25¬∞C", "condition": "ensoleill√©"},
            "Lille": {"temp": "18¬∞C", "condition": "pluvieux"}
        }
        return weather_data.get(city.title(), {"temp": "20¬∞C", "condition": "indisponible"})

    def handle_weather_intent(self, user_input):
        """G√©rer les demandes de m√©t√©o"""
        cities = ["Paris", "Lyon", "Marseille", "Lille"]
        for city in cities:
            if city.lower() in user_input.lower():
                weather = self.get_weather(city)
                return f"√Ä {city}, il fait {weather['temp']} et le temps est {weather['condition']}."
        return "Pour quelle ville souhaitez-vous conna√Ætre la m√©t√©o?"

    def get_response(self, user_input):
        """G√©n√©rer une r√©ponse avanc√©e en fonction de l'entr√©e utilisateur"""
        try:
            # Pr√©traitement
            tokens = self.preprocess_text(user_input)
            
            # D√©tection de l'intention
            intent = self.get_intent(tokens)
            
            # Analyse du sentiment
            sentiment = self.analyze_sentiment(user_input)
            
            # Si l'intention est m√©t√©o
            if "m√©t√©o" in user_input.lower():
                return self.handle_weather_intent(user_input)
            
            # Si une intention est d√©tect√©e
            if intent and intent in self.intents:
                response = random.choice(self.intents[intent]["responses"])
                # Si la r√©ponse est une fonction
                if callable(response):
                    return response()
                return response
            
            # R√©ponse par d√©faut selon le sentiment
            if sentiment == "n√©gatif":
                return "Je sens que quelque chose vous pr√©occupe. Comment puis-je vous aider?"
            elif sentiment == "positif":
                return "Je suis ravi de voir votre enthousiasme! Comment puis-je vous assister?"
            
            return "Je ne suis pas s√ªr de comprendre. Pouvez-vous reformuler ou me dire plus pr√©cis√©ment ce que vous souhaitez?"
            
        except Exception as e:
            st.error(f"Erreur lors de la g√©n√©ration de la r√©ponse: {str(e)}")
            return "D√©sol√©, une erreur s'est produite. Pouvez-vous r√©essayer?"

    def transcribe_speech(self):
        """Transcription de la parole en texte avec gestion avanc√©e des erreurs"""
        try:
            with sr.Microphone() as source:
                # Ajustement pour le bruit ambiant
                self.recognizer.adjust_for_ambient_noise(source, duration=0.5)
                st.write("üé§ En √©coute... Parlez maintenant!")
                
                # Param√®tres avanc√©s pour la reconnaissance
                audio = self.recognizer.listen(source, 
                                             timeout=5,
                                             phrase_time_limit=10)
                
                st.write("üìù Traitement de votre message...")
                
                # Tentative avec le fran√ßais d'abord
                try:
                    text = self.recognizer.recognize_google(audio, language='fr-FR')
                except:
                    # Fallback en anglais si le fran√ßais √©choue
                    text = self.recognizer.recognize_google(audio, language='en-US')
                
                return text
                
        except sr.WaitTimeoutError:
            return "‚ö†Ô∏è Aucune parole d√©tect√©e. Veuillez r√©essayer."
        except sr.UnknownValueError:
            return "‚ö†Ô∏è D√©sol√©, je n'ai pas compris. Pourriez-vous r√©p√©ter?"
        except sr.RequestError:
            return "‚ö†Ô∏è Service de reconnaissance vocale temporairement indisponible."
        except Exception as e:
            return f"‚ö†Ô∏è Une erreur est survenue: {str(e)}"

def load_custom_css():
    """Charge le CSS personnalis√© pour l'interface"""
    st.markdown("""
        <style>
        .stButton>button {
            background-color: #4CAF50;
            color: white;
            padding: 10px 20px;
            border-radius: 20px;
            border: none;
            font-weight: bold;
        }
        .user-message {
            background-color: #e6f3ff;
            padding: 10px;
            border-radius: 10px;
            margin
        .user-message {
            background-color: #e6f3ff;
            padding: 10px;
            border-radius: 10px;
            margin-bottom: 10px;
            text-align: left;
        }
        .bot-message {
            background-color: #f2f2f2;
            padding: 10px;
            border-radius: 10px;
            margin-bottom: 10px;
            text-align: left;
        }
        </style>
    """, unsafe_allow_html=True)

def main():
    """Fonction principale pour l'application Streamlit"""
    st.title("Assistant Vocal Intelligent")
    st.write("Bienvenue! Cliquez sur le bouton pour commencer √† parler √† votre assistant.")
    
    # Charger le CSS personnalis√©
    load_custom_css()
    
    # Cr√©er une instance du chatbot
    chatbot = AdvancedVoiceChatbot()
    
    # Section d'entr√©e audio
    if st.button("üé§ Parlez maintenant"):
        # Transcription de la parole en texte
        user_input = chatbot.transcribe_speech()
        
        if user_input:
            st.write(f"üó£Ô∏è Vous avez dit: {user_input}")
            
            # G√©n√©rer la r√©ponse du chatbot
            response = chatbot.get_response(user_input)
            st.write(f"ü§ñ R√©ponse: {response}")
            
            # Affichage des messages utilisateur et bot dans un format agr√©able
            st.markdown(f'<div class="user-message">{user_input}</div>', unsafe_allow_html=True)
            st.markdown(f'<div class="bot-message">{response}</div>', unsafe_allow_html=True)

# Ex√©cution de l'application Streamlit
if __name__ == "__main__":
    main()
